" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
scriptencoding utf-8

" Plugins Beginning {
    let g:Plug_dir = '~/.vim/plugged/'

    filetype off

    call plug#begin(g:Plug_dir)

    Plug 'majutsushi/tagbar'            " browse the tags of the current file and get an overview
    Plug 'roman/golden-ratio'           " automatic resizing
    Plug 'tpope/vim-surround'           " mappings to easily delete, change and add such surroundings in pairs
    Plug 'Yggdroot/indentLine'          " display the indention levels
    Plug 'jiangmiao/auto-pairs'         " insert or delete brackets, parens, quotes in pair
    Plug 'kshenoy/vim-signature'        " display and navigate marks
    Plug 'junegunn/vim-easy-align'
    Plug 'easymotion/vim-easymotion'    " motions
    Plug 'terryma/vim-multiple-cursors' " multiple selections

    Plug 'preservim/nerdtree'           " explorer
    Plug 'ryanoasis/vim-devicons'
    Plug 'scrooloose/nerdcommenter'     " commenter
    Plug 'Xuyuanp/nerdtree-git-plugin'  " show git status flags
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

    Plug 'mhinz/vim-signify'  " show a diff
    Plug 'tpope/vim-fugitive' " git wrapper

    Plug 'mattn/emmet-vim'
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
    Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }


    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

    Plug 'sheerun/vim-polyglot'
    Plug 'heavenshell/vim-jsdoc', {
          \ 'for': ['javascript', 'javascript.jsx', 'typescript', 'vue'],
          \ 'do': 'make install'
          \}

    Plug 'luochen1990/rainbow'
    Plug 'gorodinskiy/vim-coloresque' " css/less/sass/html color preview

    Plug 'editorconfig/editorconfig-vim'

    Plug 'mileszs/ack.vim'
    Plug 'junegunn/fzf', {
          \ 'do': { -> fzf#install() }
          \}
    Plug 'junegunn/fzf.vim'

    Plug 'dense-analysis/ale', {
          \ 'do':'npm i -g jsonlint prettier stylelint stylelint-config-standard;
          \ pip3 install flake8 pylint vim-vint autopep8 isort yapf'
          \}      " Check syntax and fix

    Plug 'ternjs/tern_for_vim', {'do': 'npm install'}

    if !has('nvim')
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif

    if has('nvim')
      Plug 'Shougo/deoplete.nvim' ,{'do': ':UpdateRemotePlugins'}
    else
      Plug 'Shougo/deoplete.nvim'
    endif
    Plug 'fszymanski/deoplete-emoji'
    Plug 'deoplete-plugins/deoplete-jedi'
    Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }

    Plug 'prettier/vim-prettier', {
        \ 'do': 'npm install',
        \ 'for': ['vue', 'css', 'less', 'scss']
        \}

    call plug#end()
" }

" Plugin Config Start {

    " Signify {
        " this first setting decides in which order try to guess your current vcs
        " UPDATE it to reflect your preferences, it will speed up opening files
        let g:signify_vcs_list = [ 'git' ]
        " nicer colors
        highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
        highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
        highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
        highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
        highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
        highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227
    " }
    " Rainbow {
        let g:rainbow_active=1
    " }
    " Easemotion {
        let g:EasyMotion_smartcase = 1
    " }
    " Emmet {
        let g:user_emmet_expandabbr_key='<leader><Leader><tab>'
    " }
    " NerdTree {
        " let g:NERDTreeWinSize=30
        let g:NERDTreeChDirMode=1
        let g:NERDTreeMouseMode=2
        let g:NERDTreeQuitOnOpen=1
        let g:NERDTreeShowHidden=1
        let g:NERDTreeShowBookmarks=1
        let g:NERDTreeKeepTreeInNewTab=1
        let g:NERDTreeIgnore=[
                    \ '\.py[cd]$', '\~$', '\.swo$',
                    \ '\.swp$', '^\.git$', '^\.hg$',
                    \ '^\.svn$', '\.bzr$', '^\.DS_Store',
                    \ 'node_modules', '\.meta$', '\.fire$']
        let g:NERDTreeGitStatusIndicatorMapCustom = {
            \ 'Modified'  : '*',
            \ 'Staged'    : '+',
            \ 'Untracked' : '✭',
            \ 'Renamed'   : '➜',
            \ 'Unmerged'  : '═',
            \ 'Deleted'   : 'x',
            \ 'Dirty'     : '✗',
            \ 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒',
            \ 'Unknown'   : '?' }
        let g:NERDTreeDirArrowExpandable = '+'
        let g:NERDTreeDirArrowCollapsible = '-'
    " }
    " fzf {
        let g:fzf_action = {
                    \ 'ctrl-e': 'edit',
                    \ 'ctrl-t': 'tab split',
                    \ 'ctrl-x': 'split',
                    \ 'ctrl-v': 'vsplit' }
    " }
    " Ultisnips {
        let g:UltiSnipsExpandTrigger='<leader><tab>'
        let g:UltiSnipsJumpBackwardTrigger='<c-j>'
        let g:UltiSnipsJumpForwardTrigger='<c-k>'
        let g:UltiSnipsEditSplit='vertical'
    " }
    " IndentLine {
        let g:indentLine_concealcursor='inc'
        let g:indentLine_conceallevel=2
    " }
    " Ale {
        let g:ale_fixers = {
                    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
                    \   'go':['gofmt', 'goimports'],
                    \   'python':['autopep8', 'isort', 'yapf'],
                    \   'javascript':['eslint'],
                    \   'typescript':['eslint'],
                    \   'vue':['eslint'],
                    \   'scss':['stylelint'],
                    \   'css':['stylelint'],
                    \   'json':['prettier']}

        let g:ale_linters = {
                    \   'go':['gometalinter', 'gofmt'],
                    \   'python':['flake8', 'pylint'],
                    \   'javascript':['eslint'],
                    \   'typescript':['eslint'],
                    \   'vue':['eslint'],
                    \   'scss':['stylelint'],
                    \   'css':['stylelint'],
                    \   'json':['jsonlint'],
                    \   'sh':['shellcheck'],
                    \   'vim':['vint']}
        "let g:ale_lint_on_insert_leave=1
        let g:ale_lint_on_enter=1
        let g:ale_fix_on_save=1
        nmap <silent> <C-k> <Plug>(ale_previous_wrap)
        nmap <silent> <C-j> <Plug>(ale_next_wrap)
    " }
    "" YouCompleteMe {
        "set completeopt-=preview
        "let g:acp_enableAtStartup = 0
    "" }
    " deoplete {
        let g:deoplete#enable_at_startup = 1
        call deoplete#custom#option('num_processes', 4)
    " }
    "" Defx {
      "nmap <leader>d :Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
      "call defx#custom#option('_', {
              "\ 'columns': 'icons:git:mark:indent:icon:filename:type:size:time',
              "\ 'split': 'vertical',
              "\ })
      "autocmd FileType defx call s:defx_my_settings()
        "function! s:defx_my_settings() abort
          "" Define mappings
          "nnoremap <silent><buffer><expr> <CR>
          "\ defx#do_action('open')
          "nnoremap <silent><buffer><expr> c
          "\ defx#do_action('copy')
          "nnoremap <silent><buffer><expr> m
          "\ defx#do_action('move')
          "nnoremap <silent><buffer><expr> p
          "\ defx#do_action('paste')
          "nnoremap <silent><buffer><expr> l
          "\ defx#do_action('open')
          "nnoremap <silent><buffer><expr> E
          "\ defx#do_action('open', 'vsplit')
          "nnoremap <silent><buffer><expr> P
          "\ defx#do_action('open', 'pedit')
          "nnoremap <silent><buffer><expr> o
          "\ defx#do_action('open_or_close_tree')
          "nnoremap <silent><buffer><expr> K
          "\ defx#do_action('new_directory')
          "nnoremap <silent><buffer><expr> N
          "\ defx#do_action('new_file')
          "nnoremap <silent><buffer><expr> M
          "\ defx#do_action('new_multiple_files')
          "nnoremap <silent><buffer><expr> C
          "\ defx#do_action('toggle_columns',
          "\                'mark:indent:icon:filename:type:size:time')
          "nnoremap <silent><buffer><expr> S
          "\ defx#do_action('toggle_sort', 'time')
          "nnoremap <silent><buffer><expr> d
          "\ defx#do_action('remove')
          "nnoremap <silent><buffer><expr> r
          "\ defx#do_action('rename')
          "nnoremap <silent><buffer><expr> !
          "\ defx#do_action('execute_command')
          "nnoremap <silent><buffer><expr> x
          "\ defx#do_action('execute_system')
          "nnoremap <silent><buffer><expr> yy
          "\ defx#do_action('yank_path')
          "nnoremap <silent><buffer><expr> .
          "\ defx#do_action('toggle_ignored_files')
          "nnoremap <silent><buffer><expr> ;
          "\ defx#do_action('repeat')
          "nnoremap <silent><buffer><expr> h
          "\ defx#do_action('cd', ['..'])
          "nnoremap <silent><buffer><expr> ~
          "\ defx#do_action('cd')
          "nnoremap <silent><buffer><expr> q
          "\ defx#do_action('quit')
          "nnoremap <silent><buffer><expr> <Space>
          "\ defx#do_action('toggle_select') . 'j'
          "nnoremap <silent><buffer><expr> *
          "\ defx#do_action('toggle_select_all')
          "nnoremap <silent><buffer><expr> j
          "\ line('.') == line('$') ? 'gg' : 'j'
          "nnoremap <silent><buffer><expr> k
          "\ line('.') == 1 ? 'G' : 'k'
          "nnoremap <silent><buffer><expr> <C-l>
          "\ defx#do_action('redraw')
          "nnoremap <silent><buffer><expr> <C-g>
          "\ defx#do_action('print')
          "nnoremap <silent><buffer><expr> cd
          "\ defx#do_action('change_vim_cwd')
        "endfunction
    "" }
    " Ack {
        let g:ackprg = 'ag --nogroup --nocolor --column'
    " }
    " Easy align{
        xmap ga <Plug>(EasyAlign)
        nmap ga <Plug>(EasyAlign)
    " }
    " nerdtree syntax highlight{
        let g:WebDevIconsDisableDefaultFolderSymbolColorFromNERDTreeDir = 1
        let g:WebDevIconsDisableDefaultFileSymbolColorFromNERDTreeFile = 1
    " }
    " Backup file {
        set backup
        set swapfile
        set undofile
        set writebackup
        " set nobackup
        " set noswapfile
        " set noundofile
        " set nowritebackup
        " 结尾的//表示生成的文件名带有绝对路径
        " 路径中用%替换目录分隔符，这样可以防止文件重名
        if WINDOWS()
            set backupdir=c:\backup\\
            set directory=c:\swp\\
            set undodir=c:\undo\\
        else
            set backupdir=~/.backup//
            set directory=~/.swp//
            set undodir=~/.undo//
        endif
    " }
    " UI {
        if has('gui_running')
            set guicursor=a:block-blinkon0
            set guioptions=
            " Fonts {
            if LINUX()
                set guifont=Fira\ Code\ 24, SauceCodePro\ Nerd\ Font\ 24
            elseif OSX()
                set guifont=Fira\ Code:h24, SauceCodePro\ Nerd\ Font:h24
            elseif WINDOWS()
                set guifont=Fira_Code:h24, SauceCodePro_Nerd_Font:h24
            endif
            " }
        endif
        if exists('g:GuiLoaded')
            set guifont=Fira\ Code:h24
        endif
    " }
" }
