" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
scriptencoding utf-8

" Plugins Beginning {
    let g:Plug_dir = '~/.vim/plugged/'

    filetype off

    call plug#begin(g:Plug_dir)

    Plug 'majutsushi/tagbar'            " browse the tags of the current file and get an overview
    Plug 'roman/golden-ratio'           " automatic resizing
    Plug 'tpope/vim-surround'           " mappings to easily delete, change and add such surroundings in pairs
    Plug 'Yggdroot/indentLine'          " display the indention levels
    Plug 'jiangmiao/auto-pairs'         " insert or delete brackets, parens, quotes in pair
    Plug 'kshenoy/vim-signature'        " display and navigate marks
    Plug 'junegunn/vim-easy-align'
    Plug 'easymotion/vim-easymotion'    " motions
    Plug 'terryma/vim-multiple-cursors' " multiple selections
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    Plug 'sheerun/vim-polyglot' " highlight
    Plug 'editorconfig/editorconfig-vim'
    Plug 'heavenshell/vim-jsdoc', {
          \ 'for': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx', 'vue'],
          \ 'do': 'make install' }

    Plug 'mhinz/vim-signify'  " show a diff
    Plug 'tpope/vim-fugitive' " git wrapper

    Plug 'mattn/emmet-vim'
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
    Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }

    " file
    Plug 'preservim/nerdtree'           " explorer
    Plug 'ryanoasis/vim-devicons'
    Plug 'scrooloose/nerdcommenter'     " commenter
    Plug 'Xuyuanp/nerdtree-git-plugin'  " show git status flags
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

    " search
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'mileszs/ack.vim'

    " syntax and fix
    Plug 'dense-analysis/ale', {
          \ 'do':'
          \ npm i -g jsonlint prettier stylelint stylelint-config-standard;
          \ pip install yapf isort flake8 pylint autopep8 vim-vint
          \ '}

    " deoplete
    if has('nvim')
      Plug 'Shougo/deoplete.nvim' ,{ 'do': '
            \ pip install pynvim neovim;
            \ :UpdateRemotePlugins
            \ '}
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif
    Plug 'fszymanski/deoplete-emoji'
    Plug 'deoplete-plugins/deoplete-jedi'
    Plug 'deoplete-plugins/deoplete-clang'
    Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}
    Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }

    call plug#end()
" }

" Plugin Config Start {

    " Signify {
        " this first setting decides in which order try to guess your current vcs
        " UPDATE it to reflect your preferences, it will speed up opening files
        let g:signify_vcs_list = [ 'git' ]
        " nicer colors
        highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
        highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
        highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
        highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
        highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
        highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227

    " }

    " Easemotion {
        let g:EasyMotion_smartcase = 1
    " }

    " Emmet {
        let g:user_emmet_expandabbr_key='<leader><Leader><tab>'
    " }

    " NerdTree {

        let g:NERDTreeWinSize=40
        let g:NERDTreeChDirMode=1
        let g:NERDTreeMouseMode=2
        let g:NERDTreeQuitOnOpen=1
        let g:NERDTreeShowHidden=1
        let g:NERDTreeShowBookmarks=1
        let g:NERDTreeKeepTreeInNewTab=1

        let g:NERDTreeIgnore=[
                    \ '\.py[cd]$', '\~$', '\.swo$',
                    \ '\.swp$', '^\.git$', '^\.hg$',
                    \ '^\.svn$', '\.bzr$', '^\.DS_Store',
                    \ 'node_modules', '\.meta$', '\.fire$']

        let g:NERDTreeGitStatusIndicatorMapCustom = {
            \ 'Modified'  : '*',
            \ 'Staged'    : '+',
            \ 'Untracked' : '✭',
            \ 'Renamed'   : '➜',
            \ 'Unmerged'  : '═',
            \ 'Deleted'   : 'x',
            \ 'Dirty'     : '✗',
            \ 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒',
            \ 'Unknown'   : '?' }

        let g:NERDTreeDirArrowExpandable = '+'
        let g:NERDTreeDirArrowCollapsible = '-'

    " }

    " fzf {

        let g:fzf_action = {
                    \ 'ctrl-e': 'edit',
                    \ 'ctrl-t': 'tab split',
                    \ 'ctrl-x': 'split',
                    \ 'ctrl-v': 'vsplit' }

    " }

    " Ultisnips {

        let g:UltiSnipsExpandTrigger='<leader><tab>'
        let g:UltiSnipsJumpBackwardTrigger='<c-j>'
        let g:UltiSnipsJumpForwardTrigger='<c-k>'
        let g:UltiSnipsEditSplit='vertical'

    " }

    " IndentLine {
        let g:indentLine_concealcursor='inc'
        let g:indentLine_conceallevel=2
    " }

    " Ale {

        augroup FiletypeGroup
            autocmd!
            au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
            au BufNewFile,BufRead *.tsx set filetype=javascript.tsx
        augroup END

        let g:ale_fixers = {
                    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
                    \   'c':['uncrustify'],
                    \   'cpp':['uncrustify'],
                    \   'css':['stylelint'],
                    \   'go':['gofmt'],
                    \   'graphqls':['eslint'],
                    \   'html':['tidy'],
                    \   'javascript':['eslint'],
                    \   'jsx':['eslint'],
                    \   'json':['prettier'],
                    \   'less':['stylelint'],
                    \   'markdown':['prettier'],
                    \   'python':['autopep8', 'isort', 'yapf'],
                    \   'scss':['stylelint'],
                    \   'sh':['shfmt'],
                    \   'swift':['swiftformat'],
                    \   'typescript':['eslint'],
                    \   'tsx':['eslint'],
                    \   'vue':['eslint'],
                    \   'yaml':['prettier']}

        let g:ale_linter_aliases = {
                    \ 'jsx': ['css', 'javascript'],
                    \ 'tsx': ['css', 'javascript'],
                    \ 'vue': ['vue', 'javascript']
                    \ }
        let g:ale_linters = {
                    \   'c':['ccls'],
                    \   'css':['stylelint'],
                    \   'cpp':['ccls'],
                    \   'go':['gofmt'],
                    \   'graphqls':['prettier'],
                    \   'html':['tidy'],
                    \   'javascript':['eslint'],
                    \   'jsx':['stylelint', 'eslint'],
                    \   'json':['jsonlint'],
                    \   'less':['stylelint'],
                    \   'scss':['stylelint'],
                    \   'typescript':['eslint'],
                    \   'tsx':['stylelint', 'eslint'],
                    \   'vue':['eslint'],
                    \   'python':['flake8', 'pylint'],
                    \   'swift':['swiftlint'],
                    \   'yaml':['yamllint'],
                    \   'sh':['shellcheck'],
                    \   'vim':['vint']}
        let g:ale_lint_on_insert_leave=1
        let g:ale_lint_on_enter=1
        let g:ale_fix_on_save=1
    " }

    " deoplete {
        let g:deoplete#enable_at_startup = 1
        call deoplete#custom#option('num_processes', 4)
    " }

    " Ack {
        let g:ackprg = 'ag --nogroup --nocolor --column'
    " }

    " nerdtree syntax highlight{
        let g:WebDevIconsDisableDefaultFolderSymbolColorFromNERDTreeDir = 1
        let g:WebDevIconsDisableDefaultFileSymbolColorFromNERDTreeFile = 1
    " }

    " vim-multiple-cursors {
        func! Multiple_cursors_before()
          if deoplete#is_enabled()
            call deoplete#disable()
            let g:deoplete_is_enable_before_multi_cursors = 1
          else
            let g:deoplete_is_enable_before_multi_cursors = 0
          endif
        endfunc

        func! Multiple_cursors_after()
          if g:deoplete_is_enable_before_multi_cursors
            call deoplete#enable()
          endif
        endfunc
    " }
" }
